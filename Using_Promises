<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Using Promises</title>
</head>
<body>
    <script>
        function updateLastUserActivityTime() {
  return new Promise((resolve, reject) => {
    setTimeout(() => {
      const lastActivityTime = new Date();
      console.log('Last activity time updated:', lastActivityTime);
      resolve(lastActivityTime);
    }, 1000);
  });
}

function createPost(user, content) {
  return new Promise((resolve, reject) => {
    // Simulating creating a post
    const post = { user, content };
    console.log('Post created:', post);
    resolve(post);
  });
}

function deletePost(post) {
  return new Promise((resolve, reject) => {
    // Simulating deleting a post
    console.log('Post deleted:', post);
    resolve(post);
  });
}

function getColdDrinks() {
  return new Promise((resolve, reject) => {
    // Simulating getting cold drinks after getting butter
    console.log('Got cold drinks.');
    resolve('Cold drinks');
  });
}

// Example usage with Promises
const user = 'Rohan';
const postContent = 'This is a sample post for Promise.';

createPost(user, postContent)
  .then((createdPost) => {
    return Promise.all([updateLastUserActivityTime(), createdPost]);
  })
  .then(([lastActivityTime, createdPost]) => {
    console.log('User last activity time:', lastActivityTime);
    console.log('All posts:', [createdPost]);

    // Assuming you have an array of posts
    const posts = [createdPost];

    // Assuming you have a function that deletes a post from the array
    return deletePost(posts.pop());
  })
  .then((deletedPost) => {
    console.log('Remaining posts:', [deletedPost]);
    return getColdDrinks();
  })
  .then((coldDrinks) => {
    console.log('Got:', coldDrinks);
  })
  .catch((error) => {
    console.error('An error occurred:', error);
  });

    </script>
</body>
</html>
